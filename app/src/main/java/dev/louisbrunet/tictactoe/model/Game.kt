package dev.louisbrunet.tictactoe.model

import android.os.Parcel
import android.os.Parcelable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.snapshots.SnapshotStateList

class Game(
    val currentPlayer: MutableState<Player?> = mutableStateOf(Player.X),
    val rows: List<SnapshotStateList<Cell>> = listOf(
        mutableStateListOf(Cell(), Cell(), Cell()),
        mutableStateListOf(Cell(), Cell(), Cell()),
        mutableStateListOf(Cell(), Cell(), Cell()),
    )
) : Parcelable {
    private var moveCount: Int = 0
    val isOver: MutableState<Boolean> = mutableStateOf(false)

    constructor(parcel: Parcel) : this() {
        moveCount = parcel.readInt()
        isOver.value = parcel.readInt() != 0
        val savedPlayer: String? = parcel.readString()
        currentPlayer.value =
            if (savedPlayer != null) Player.valueOf(savedPlayer)
            else null

        for (rowIndex in 0 until 3) {
            for (columnIndex in 0 until 3) {
                val savedContent: String? = parcel.readString()
                val content =
                    if (savedContent != null) Player.valueOf(savedContent)
                    else null
                val isWinning = parcel.readInt() != 0
                rows[rowIndex][columnIndex] = Cell(content, isWinning)
            }
        }
    }

    fun play(row: Int, column: Int) {
        val clicked: Cell = this.rows[row][column]
        if (!clicked.isEmpty() || this.isOver.value) {
            return
        }
        this.rows[row][column] = clicked.copy(content = this.currentPlayer.value)
        this.moveCount++

        val isWon = checkWin(row, column)
        val isMaxMoveCount = this.moveCount >= 9

        if (!isWon && !isMaxMoveCount) {
            this.currentPlayer.value =
                if (this.currentPlayer.value == Player.X) Player.O else Player.X
        } else {
            this.isOver.value = true
            if (isMaxMoveCount) {
                this.currentPlayer.value = null
                println("set currentPlayer to ${currentPlayer.value}")
            }
            println("Game Over")
        }
    }

    private fun checkWin(rowIndex: Int, colIndex: Int): Boolean {
        val row: List<Cell> = this.rows[rowIndex]
        if (this.isSameContent(row)) {
            // row is won
            for (c in 0 until 3) {
                this.setWinningCell(rowIndex, c)
            }
            return true
        }

        val col = this.rows.map { it[colIndex] }
        if (this.isSameContent(col)) {
            // column is won
            for (r in 0 until 3) {
                this.setWinningCell(r, colIndex)
            }
            return true
        }

        var diag: List<Cell> = this.rows.mapIndexed { index, cells -> cells[index] }
        if (this.isSameContent(diag)) {
            for (i in 0 until 3) {
                this.setWinningCell(i, i)
            }
            return true
        }

        diag = this.rows.mapIndexed { index, cells -> cells[2 - index] }
        if (this.isSameContent(diag)) {
            for (i in 0 until 3) {
                this.setWinningCell(i, 2 - i)
            }
            return true
        }

        return false
    }

    private fun isSameContent(cells: List<Cell>): Boolean {
        // array is never empty, use first element's content
        return cells.all { it.content != null && it.content == cells[0].content  }
    }

    private fun setWinningCell(row: Int, col: Int) {
        println("cell ($row, $col) is winning")
        this.rows[row][col] = this.rows[row][col].copy(isWinningCell = true)
    }


    override fun writeToParcel(parcel: Parcel, flags: Int) {
        parcel.writeInt(moveCount)
        parcel.writeInt(if(isOver.value) 1 else 0)
        parcel.writeString(currentPlayer.value?.name)

        for (row in rows) {
            for (cell in row) {
                parcel.writeString(cell.content?.name)
                parcel.writeInt(if (cell.isWinningCell) 1 else 0)
            }
        }
    }

    /* auto-generated by IDE */
    override fun describeContents(): Int {
        return 0
    }

    companion object CREATOR : Parcelable.Creator<Game> {
        override fun createFromParcel(parcel: Parcel): Game {
            return Game(parcel)
        }

        override fun newArray(size: Int): Array<Game?> {
            return arrayOfNulls(size)
        }
    }
}